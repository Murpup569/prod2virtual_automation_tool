from ciscoconfparse import CiscoConfParse
import re

def remove_unsupported_commands(config):
    parse = CiscoConfParse(config.splitlines(), syntax="ios", ignore_blank_lines=False)

    parent_filters = [
        "^username ",
        "^aaa ",
        "^radius-server ",
        "^radius server ",
        "^platform ",
        "^enable secret",
        "^password ",
        "^line vty",
        "^line con",
        "^line aux",
        "^key ",
        "^crypto ",
        "^snmp-server ",
        "^call-home",
        "^ip http ",
        "^control-plane",
        "^ip forward-protocol ",
        "^redundancy",
        "^license ",
        "^diagnostic ",
        "^memory ",
        "^multilink ",
        "^login ",
        "^subscriber ",
        "^no aaa ",
        "^service ",
        "^version ",
        "^Building ",
        "^Current ",
        "^vrf definition Mgmt-vrf",
        r"^switch \d+ provision",
    ]

    for regex in parent_filters:
        objs = parse.find_objects(regex)
        for obj in objs:
            obj.delete()

    return "\n".join(parse.ioscfg)

def normalize_config_interfaces(config, interface_map=None):
    """Rename interfaces in *config* using *interface_map*.

    If no mapping is supplied, a new one will be generated by renaming all
    physical interfaces sequentially. Only interface names present in
    *interface_map* are replaced in the configuration so other interfaces are
    left untouched.
    """

    lines = config.splitlines()
    interface_map = interface_map or {}
    current_intf = None
    counter = 0
    updated_lines = []

    physical_pattern = re.compile(
        r"^(?:GigabitEthernet|FastEthernet|TenGigabitEthernet|Ethernet|Gi|Fa|Te)"
    )

    for line in lines:
        if line.strip().startswith("interface"):
            current_intf = line.strip().split("interface", 1)[1].strip()
            if current_intf not in interface_map and physical_pattern.match(current_intf):
                module = counter // 4
                port = counter % 4
                interface_map[current_intf] = f"GigabitEthernet{module}/{port}"
                counter += 1

            new_name = interface_map.get(current_intf)
            if new_name:
                updated_lines.append(f"interface {new_name}")
            else:
                updated_lines.append(line)
        else:
            for orig, new in interface_map.items():
                line = re.sub(rf"\b{re.escape(orig)}\b", new, line)
            updated_lines.append(line)

    return "\n".join(updated_lines), interface_map